"use strict";(self.webpackChunkgreencratesg_website=self.webpackChunkgreencratesg_website||[]).push([[7238],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),_=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=_(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=_(n),d=o,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||s;return n?r.createElement(h,a(a({ref:t},p),{},{components:n})):r.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,a[1]=i;for(var _=2;_<s;_++)a[_]=n[_];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>_});var r=n(7462),o=(n(7294),n(3905));const s={sidebar_position:3},a="\ud83d\udce1 Arduino Mega",i={unversionedId:"System Design/arduino_mega",id:"System Design/arduino_mega",title:"\ud83d\udce1 Arduino Mega",description:"File link//github.com/GreenCrateSG/pcb",source:"@site/docs/System Design/arduino_mega.md",sourceDirName:"System Design",slug:"/System Design/arduino_mega",permalink:"/docs/System Design/arduino_mega",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/System Design/arduino_mega.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"\ud83d\udcf1 Application Design",permalink:"/docs/System Design/app"},next:{title:"\ud83d\udd0c Junction Box Design",permalink:"/docs/System Design/junction_box"}},l={},_=[{value:"Overview",id:"overview",level:2},{value:"Printed Circuit Board Design",id:"printed-circuit-board-design",level:2},{value:"Code Design",id:"code-design",level:2},{value:"MQTT API",id:"mqtt-api",level:3},{value:"MQTT Callback",id:"mqtt-callback",level:4},{value:"Sensors Class",id:"sensors-class",level:3},{value:"Reservoir Class",id:"reservoir-class",level:3},{value:"Junction Box Class",id:"junction-box-class",level:3}],p={toc:_},u="wrapper";function c(e){let{components:t,...s}=e;return(0,o.kt)(u,(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-arduino-mega"},"\ud83d\udce1 Arduino Mega"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"File link: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/GreenCrateSG/pcb"},"https://github.com/GreenCrateSG/pcb"))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"PCB Render",src:n(9013).Z,width:"840",height:"839"})),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("h2",{id:"printed-circuit-board-design"},"Printed Circuit Board Design"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"PCB",src:n(2645).Z,width:"2742",height:"1774"}),"\n",(0,o.kt)("em",{parentName:"p"},"design by Ajay Shanker")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"LED Light (Power indicator)")," - Safety feature to indicate that the PCB is powered on."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Linear Voltage Regulator")," - 12V DC power supply from a switching power is converted to 5V DC. The 5V DC is then used to power the Arduino Mega and the 12V DC is used to power the Fan."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Perisatic Pump")," - The pump is used to pump the nutrient solution from the reservoir to the grow bed."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"5V Fan Controller")," - The fan is used to cool the internal junction box."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"12V Fan Controller")," - The fans are used to have controlled environment for the plants."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Arduino Mega")," - The Arduino Mega is the main microcontroller that controls the entire system."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"4 Channel Relay")," - The relay is used to control the 12V Grow Lights."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"DHT11 Temperature & Humdidty")," - The sensor is used to measure the temperature and humidity of the environment. (One Wire Protocol)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"TSL2591 Lux Sensor")," - The sensor is used to measure the light intensity of the environment. (I2C Protocol)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Atlas Scientific Sensor")," - The sensor is used to measure the pH, EC and temperature of the reservoir. (I2C Protocol)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"DFRduino Ethernet W5100S")," - The ethernet shield is used to connect to MQTT Broker. (SPI Protocol)")),(0,o.kt)("h2",{id:"code-design"},"Code Design"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"File link: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/GreenCrateSG/iot"},"https://github.com/GreenCrateSG/iot"))),(0,o.kt)("h3",{id:"mqtt-api"},"MQTT API"),(0,o.kt)("p",null,"Broken down to 3 main topics:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"cmnd"),": command mode ",(0,o.kt)("em",{parentName:"p"},"(e.g. on grow lights)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"stat"),": status mode ",(0,o.kt)("em",{parentName:"p"},"(e.g. check if the altas scientific sensor is working)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"tele"),": telemetry mode ",(0,o.kt)("em",{parentName:"p"},"(e.g. what is the current temperature of the environment)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'/** Topic **/\n\n#define TOPIC_API             "arduino/#"  // <- any topic related to arduino\n#define TOPIC_CMND            "cmnd"      // command\n#define TOPIC_STAT            "stat"      // status\n#define TOPIC_TELE            "tele"      // telemetry\n\n#define DHTTOP_TEMP_TOPIC     "sensor/dhttop/temperature"\n#define DHTTOP_HUM_TOPIC      "sensor/dhttop/humidity"\n#define DHTBOT_TEMP_TOPIC     "sensor/dhtbot/temperature"\n#define DHTBOT_HUM_TOPIC      "sensor/dhtbot/humidity"\n\n#define LUXTOP_TOPIC          "sensor/luxtop"\n#define LUXBOT_TOPIC          "sensor/luxbot"\n\n#define PH_TOPIC              "sensor/ph"\n#define EC_TOPIC              "sensor/ec"\n#define TEMP_TOPIC            "sensor/temp"\n\n#define POWER_TOPIC           "sensor/power"\n#define LOADVOLTAGE_TOPIC     "sensor/loadvoltage"\n#define CURRENT_TOPIC         "sensor/current"\n\n#define PH_TARGET_TOPIC       "set/ph_target"\n#define EC_TARGET_TOPIC       "set/ec_target"\n#define PH_SET_UPPER          "set/ph_upper"\n#define PH_SET_LOWER          "set/ph_lower"\n#define EC_SET_THRESHOLD      "set/ec_threshold"\n\n#define PUMP_SET_TOPIC        "set/pump"\n#define LIGHT_ONE_SET_TOPIC   "set/light_one"\n#define LIGHT_TWO_SET_TOPIC   "set/light_two"\n\n#define MOTOR_A_SET_TOPIC     "set/motor_a"\n#define MOTOR_B_SET_TOPIC     "set/motor_b"\n\n#define AUTO_NUTRITION_DOSE  "auto_nutrition_dose"\n/****/\n')),(0,o.kt)("h4",{id:"mqtt-callback"},"MQTT Callback"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'\nString _str;\n\n/**\n * @brief Callback for command\n * @param subtopic Subtopic\n * @param hydro Class Hydro\n */\nvoid command_callback(String& subtopic, String& payload, Hydro& hydro) {\n  D_println("[MQTT]: command");\n\n  _str  = String();  // clear string\n  _str += subtopic;\n  _str += "/";\n  _str += TOPIC_CMND;\n\n  if (subtopic == PH_TARGET_TOPIC)\n    hydro.set_ph_target(payload.toFloat());\n  else if (subtopic == EC_TARGET_TOPIC)\n    hydro.set_ec_target(payload.toFloat());\n  else if (subtopic == PH_SET_UPPER)\n    hydro.set_ph_upper_threshold(payload.toFloat());\n  else if (subtopic == PH_SET_LOWER)\n    hydro.set_ph_lower_threshold(payload.toFloat());\n  else if (subtopic == EC_SET_THRESHOLD)\n    hydro.set_ec_threshold(payload.toFloat());\n  else if (subtopic == PUMP_SET_TOPIC) {\n    if (payload == "true")\n      hydro.set_pump(true);\n    else\n      hydro.set_pump(false);\n  } else if (subtopic == LIGHT_ONE_SET_TOPIC) {\n    if (payload == "true")\n      hydro.set_light_one(true);\n    else\n      hydro.set_light_one(false);\n  } else if (subtopic == LIGHT_TWO_SET_TOPIC) {\n    if (payload == "true")\n      hydro.set_light_two(true);\n    else\n      hydro.set_light_two(false);\n  } else if (subtopic == MOTOR_A_SET_TOPIC) {\n    if (payload == "true")\n      hydro.set_solution_a_motor(true);\n    else\n      hydro.set_solution_a_motor(false);\n  } else if (subtopic == MOTOR_B_SET_TOPIC) {\n    if (payload == "true")\n      hydro.set_solution_b_motor(true);\n    else\n      hydro.set_solution_b_motor(false);\n  } else\n    mqtt_publish(_str.c_str(), "Error");\n}\n\n/**\n * @brief Callback for telemetry\n * @param subtopic Subtopic\n * @param hydro Class Hydro\n */\nvoid telemetry_callback(String& subtopic, String& payload, Hydro& hydro) {\n  D_println("[MQTT]: telemetry");\n\n  _str  = String();  // clear string\n  _str += subtopic;\n  _str += "/";\n  _str += TOPIC_TELE;\n\n  if (subtopic == DHTTOP_TEMP_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.top_sensors.get_temp()).c_str());\n  else if (subtopic == DHTTOP_HUM_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.top_sensors.get_hum()).c_str());\n  else if (subtopic == DHTBOT_TEMP_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.bottom_sensors.get_temp()).c_str());\n  else if (subtopic == DHTBOT_HUM_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.bottom_sensors.get_hum()).c_str());\n  else if (subtopic == LUXTOP_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.top_sensors.get_lux()).c_str());\n  else if (subtopic == LUXBOT_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.bottom_sensors.get_lux()).c_str());\n  else if (subtopic == PH_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.reservoir.get_ph()).c_str());\n  else if (subtopic == EC_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.reservoir.get_ec()).c_str());\n  else if (subtopic == TEMP_TOPIC)\n    mqtt_publish(_str.c_str(), String(hydro.reservoir.get_temp()).c_str());\n  else\n    mqtt_publish(_str.c_str(), "Error");\n}\n\n/**\n * @brief Callback for status\n * @param subtopic Subtopic\n * @param hydro Class Hydro\n */\nvoid status_callback(String& subtopic, String& payload, Hydro& hydro) {\n  D_println("[MQTT]: status");\n\n  _str  = String();  // clear string\n  _str += subtopic;\n  _str += "/";\n  _str += TOPIC_STAT;\n\n  if (subtopic == AUTO_NUTRITION_DOSE)\n    if (hydro.reservoir.get_ec() < hydro.get_ec_threshold())\n      mqtt_publish(_str.c_str(), "true");\n    else\n      mqtt_publish(_str.c_str(), "false");\n  else\n    mqtt_publish(subtopic.c_str(), "OK");\n}\n')),(0,o.kt)("h3",{id:"sensors-class"},"Sensors Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * @brief Class Set of Sensor\n *\n */\nclass Sensors {\n private:\n  float temp = 0.0;\n  float hum = 0.0;\n  int lux = 0;\n\n public:\n  // init\n  Sensors() {\n    set_temp(0.0);\n    set_hum(0.0);\n    set_lux(0);\n  }\n\n  Sensors(float _temp, float _hum, int _lux) {\n    set_temp(_temp);\n    set_hum(_hum);\n    set_lux(_lux);\n  }\n\n  ~Sensors() {}\n\n  float get_temp() { return temp; };\n  float get_hum() { return hum; };\n  uint16_t get_lux() { return lux; }\n  State set_temp(float _val);\n  State set_hum(float _val);\n  State set_temp_hum(float _temp, float _hum);\n  State set_lux(int _lux);\n  State serial_print();\n};\n")),(0,o.kt)("h3",{id:"reservoir-class"},"Reservoir Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * @brief Class Set of Reservoir\n *\n */\nclass Reservoir {\n private:\n  float temp = 0.0;\n  float ph = 0.0;\n  float ec = 0.0;\n\n public:\n  // init\n  Reservoir() {\n    set_temp(0.0);\n    set_ph(0.0);\n    set_ec(0.0);\n  }\n  Reservoir(float _temp, float _ph, float _ec) {\n    set_temp(_temp);\n    set_ph(_ph);\n    set_ec(_ec);\n  }\n\n  ~Reservoir() {}\n\n  float get_temp() { return temp; }\n  float get_ph() { return ph; }\n  float get_ec() { return ec; }\n  State set_temp(float _temp);\n  State set_ph(float _ph);\n  State set_ec(float _ec);\n  State set_all(float _temp, float _ph, float _ec);\n  State serial_print();\n};\n\n")),(0,o.kt)("h3",{id:"junction-box-class"},"Junction Box Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Main Class\nclass Hydro {\n private:\n  // Dosing thresholds\n  float ph_upper_threshold = 6.5;  // Upper pH threshold for pH adjustment\n  float ph_lower_threshold = 6.0;  // Lower pH threshold for pH adjustment\n  float ec_threshold = 2.0;        // EC threshold for nutrient dosing\n\n  // Target values\n  float ec_target = 2.4;  // Target EC value\n  float ph_target = 6.2;  // Target pH value\n\n  float reservoir_volume = 135000 * 0.5;  // volume of reservoir (ml)\n  float flowrate_perastatic_pump = 45;    // ml/min\n  float nutrition_concentration = 200;    // 5ml per 1000ml\n  float amount_of_nutrition_needed = reservoir_volume / nutrition_concentration;\n\n public:\n  Hydro() {}\n  Hydro(float _ph_upper_threshold, float _ph_lower_threshold, float _ec_threshold, float _ec_target, float _ph_target) {\n    set_ph_upper_threshold(_ph_upper_threshold);\n    set_ph_lower_threshold(_ph_lower_threshold);\n    set_ec_threshold(_ec_threshold);\n    set_ec_target(_ec_target);\n    set_ph_target(_ph_target);\n  }\n\n  ~Hydro() {}\n  // bool light_one = false;  // Germination\n  // bool light_two = false;  // Germination\n\n  Sensors top_sensors = Sensors();\n  Sensors bottom_sensors = Sensors();\n\n  Reservoir reservoir = Reservoir();\n\n  State auto_nutrition_dose();  // todo\n\n  // Getters\n  float get_ph_upper_threshold() { return ph_upper_threshold; }\n  float get_ph_lower_threshold() { return ph_lower_threshold; }\n  float get_ec_threshold() { return ec_threshold; }\n  float get_ec_target() { return ec_target; }\n  float get_ph_target() { return ph_target; }\n\n  // Setters\n  State set_ph_upper_threshold(float _val);\n  State set_ph_lower_threshold(float _val);\n  State set_ec_threshold(float _val);\n  State set_ec_target(float _val);\n  State set_ph_target(float _val);\n  void set_pump(bool _val);\n  void set_light_one(bool _val);\n  void set_light_two(bool _val);\n  void set_solution_a_motor(bool _val);\n  void set_solution_b_motor(bool _val);\n  State print();\n};\n")))}c.isMDXComponent=!0},2645:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/brd-a912aebeb8958210acb72cce72d0559e.PNG"},9013:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/pcb-285fb044d9ce044d8e4b96fee2d56ded.PNG"}}]);